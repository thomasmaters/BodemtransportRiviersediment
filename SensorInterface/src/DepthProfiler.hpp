/*
 * DepthProfiler.hpp
 *
 *  Created on: 2 Jul 2018
 *      Author: Thomas Maters
 *		Email : thomasmaters@hotmail.com (TG.Maters@student.han.nl)
 */

#ifndef SRC_DEPTHPROFILER_HPP_
#define SRC_DEPTHPROFILER_HPP_

#include "DataBuffer.hpp"
#include "Dune.hpp"
#include "FileHandler.hpp"
#include "Matrix.hpp"

#include <thread>
#include <valarray>
#include <vector>

#define MAX_ITERATIONS 200
#define STEP_SIZE 1e-5

namespace Controller
{
/*
 *
 */
// Datapoints per ping. Type to store the pings as.
template <std::size_t N, typename T = float>
class DepthProfiler
{
    static_assert(std::is_arithmetic<T>::value, "Type must be aritmatic.");

  public:
    DepthProfiler()
    {
        Matrix<480, 3, T> inputs({ { 0.0, 4.0, 0 },
                                   { 0.1695, 4.03875, 0 },
                                   { 0.376, 4.1000000000000005, 0 },
                                   { 0.6164999999999999, 4.17625, 0 },
                                   { 0.8879999999999999, 4.26, 0 },
                                   { 1.1875, 4.34375, 0 },
                                   { 1.512, 4.42, 0 },
                                   { 1.8584999999999998, 4.48125, 0 },
                                   { 2.2239999999999998, 4.519999999999999, 0 },
                                   { 2.6055000000000006, 4.52875, 0 },
                                   { 3.0, 4.5, 0 },
                                   { 3.4235, 4.41975, 0 },
                                   { 3.888, 4.288, 0 },
                                   { 4.384499999999999, 4.11825, 0 },
                                   { 4.904, 3.9239999999999995, 0 },
                                   { 5.4375, 3.71875, 0 },
                                   { 5.976, 3.5160000000000005, 0 },
                                   { 6.5105, 3.3292499999999996, 0 },
                                   { 7.031999999999999, 3.1719999999999997, 0 },
                                   { 7.5315, 3.0577499999999995, 0 },
                                   { 8.0, 3.0, 0 },
                                   { 8.444999999999999, 3.0010000000000003, 0 },
                                   { 8.88, 3.0480000000000005, 0 },
                                   { 9.305, 3.1319999999999997, 0 },
                                   { 9.719999999999999, 3.2439999999999998, 0 },
                                   { 10.125, 3.375, 0 },
                                   { 10.520000000000001, 3.516, 0 },
                                   { 10.905000000000001, 3.658, 0 },
                                   { 11.279999999999998, 3.792, 0 },
                                   { 11.645, 3.909, 0 },
                                   { 12.0, 4.0, 0 },
                                   { 12.3315, 4.07925, 0 },
                                   { 12.632, 4.164, 0 },
                                   { 12.910499999999999, 4.24975, 0 },
                                   { 13.175999999999998, 4.332, 0 },
                                   { 13.4375, 4.40625, 0 },
                                   { 13.704, 4.468, 0 },
                                   { 13.984499999999999, 4.51275, 0 },
                                   { 14.288, 4.535999999999999, 0 },
                                   { 14.6235, 4.53325, 0 },
                                   { 15.0, 4.5, 0 },
                                   { 15.423499999999997, 4.41975, 0 },
                                   { 15.887999999999998, 4.288, 0 },
                                   { 16.3845, 4.11825, 0 },
                                   { 16.904, 3.9239999999999995, 0 },
                                   { 17.4375, 3.71875, 0 },
                                   { 17.976, 3.5160000000000005, 0 },
                                   { 18.510499999999997, 3.3292499999999996, 0 },
                                   { 19.031999999999996, 3.1719999999999997, 0 },
                                   { 19.5315, 3.0577499999999995, 0 },
                                   { 20.0, 3.0, 0 },
                                   { 20.444999999999997, 3.0010000000000003, 0 },
                                   { 20.880000000000003, 3.0480000000000005, 0 },
                                   { 21.305, 3.1319999999999997, 0 },
                                   { 21.72, 3.2439999999999998, 0 },
                                   { 22.125, 3.375, 0 },
                                   { 22.520000000000003, 3.516, 0 },
                                   { 22.904999999999998, 3.658, 0 },
                                   { 23.279999999999994, 3.792, 0 },
                                   { 23.645, 3.909, 0 },
                                   { 24.0, 4.0, 0 },
                                   { 24.331500000000002, 4.07925, 0 },
                                   { 24.632, 4.164, 0 },
                                   { 24.910500000000003, 4.24975, 0 },
                                   { 25.176000000000002, 4.332, 0 },
                                   { 25.4375, 4.40625, 0 },
                                   { 25.704, 4.468, 0 },
                                   { 25.9845, 4.51275, 0 },
                                   { 26.287999999999997, 4.535999999999999, 0 },
                                   { 26.6235, 4.53325, 0 },
                                   { 27.0, 4.5, 0 },
                                   { 27.423499999999997, 4.41975, 0 },
                                   { 27.888, 4.288, 0 },
                                   { 28.3845, 4.11825, 0 },
                                   { 28.903999999999996, 3.9239999999999995, 0 },
                                   { 29.4375, 3.71875, 0 },
                                   { 29.976, 3.5160000000000005, 0 },
                                   { 30.5105, 3.3292499999999996, 0 },
                                   { 31.031999999999996, 3.1719999999999997, 0 },
                                   { 31.5315, 3.0577499999999995, 0 },
                                   { 32.0, 3.0, 0 },
                                   { 32.445, 3.0010000000000003, 0 },
                                   { 32.879999999999995, 3.0480000000000005, 0 },
                                   { 33.305, 3.1319999999999997, 0 },
                                   { 33.72, 3.2439999999999998, 0 },
                                   { 34.125, 3.375, 0 },
                                   { 34.52, 3.516, 0 },
                                   { 34.905, 3.658, 0 },
                                   { 35.279999999999994, 3.792, 0 },
                                   { 35.645, 3.909, 0 },
                                   { 36.0, 4.0, 0 },
                                   { 36.3315, 4.07925, 0 },
                                   { 36.632, 4.164, 0 },
                                   { 36.9105, 4.24975, 0 },
                                   { 37.175999999999995, 4.332, 0 },
                                   { 37.4375, 4.40625, 0 },
                                   { 37.704, 4.468, 0 },
                                   { 37.9845, 4.51275, 0 },
                                   { 38.288, 4.535999999999999, 0 },
                                   { 38.62350000000001, 4.53325, 0 },
                                   { 39.0, 4.5, 0 },
                                   { 39.4235, 4.41975, 0 },
                                   { 39.888, 4.288, 0 },
                                   { 40.3845, 4.11825, 0 },
                                   { 40.903999999999996, 3.9239999999999995, 0 },
                                   { 41.4375, 3.71875, 0 },
                                   { 41.976, 3.5160000000000005, 0 },
                                   { 42.5105, 3.3292499999999996, 0 },
                                   { 43.032, 3.1719999999999997, 0 },
                                   { 43.531499999999994, 3.0577499999999995, 0 },
                                   { 44.0, 3.0, 0 },
                                   { 44.44499999999999, 3.0010000000000003, 0 },
                                   { 44.879999999999995, 3.0480000000000005, 0 },
                                   { 45.305, 3.1319999999999997, 0 },
                                   { 45.72, 3.2439999999999998, 0 },
                                   { 46.125, 3.375, 0 },
                                   { 46.52000000000001, 3.516, 0 },
                                   { 46.904999999999994, 3.658, 0 },
                                   { 47.279999999999994, 3.792, 0 },
                                   { 47.644999999999996, 3.909, 0 },
                                   { 48.0, 4.0, 0 },
                                   { 48.3315, 4.07925, 0 },
                                   { 48.632000000000005, 4.164, 0 },
                                   { 48.91049999999999, 4.24975, 0 },
                                   { 49.176, 4.332, 0 },
                                   { 49.4375, 4.40625, 0 },
                                   { 49.70399999999999, 4.468, 0 },
                                   { 49.9845, 4.51275, 0 },
                                   { 50.28799999999999, 4.535999999999999, 0 },
                                   { 50.62349999999999, 4.53325, 0 },
                                   { 51.0, 4.5, 0 },
                                   { 51.42349999999999, 4.41975, 0 },
                                   { 51.888, 4.288, 0 },
                                   { 52.3845, 4.11825, 0 },
                                   { 52.903999999999996, 3.9239999999999995, 0 },
                                   { 53.4375, 3.71875, 0 },
                                   { 53.976000000000006, 3.5160000000000005, 0 },
                                   { 54.51049999999999, 3.3292499999999996, 0 },
                                   { 55.032, 3.1719999999999997, 0 },
                                   { 55.5315, 3.0577499999999995, 0 },
                                   { 56.0, 3.0, 0 },
                                   { 56.445, 3.0010000000000003, 0 },
                                   { 56.879999999999995, 3.0480000000000005, 0 },
                                   { 57.305, 3.1319999999999997, 0 },
                                   { 57.72, 3.2439999999999998, 0 },
                                   { 58.125, 3.375, 0 },
                                   { 58.52, 3.516, 0 },
                                   { 58.905, 3.658, 0 },
                                   { 59.28, 3.792, 0 },
                                   { 59.645, 3.909, 0 },
                                   { 60.0, 4.0, 0 },
                                   { 60.3315, 4.07925, 0 },
                                   { 60.632, 4.164, 0 },
                                   { 60.91049999999999, 4.24975, 0 },
                                   { 61.175999999999995, 4.332, 0 },
                                   { 61.4375, 4.40625, 0 },
                                   { 61.70400000000001, 4.468, 0 },
                                   { 61.9845, 4.51275, 0 },
                                   { 62.28799999999998, 4.535999999999999, 0 },
                                   { 62.6235, 4.53325, 0 },
                                   { 63.0, 4.5, 0 },
                                   { 63.4235, 4.41975, 0 },
                                   { 63.888000000000005, 4.288, 0 },
                                   { 64.3845, 4.11825, 0 },
                                   { 64.904, 3.9239999999999995, 0 },
                                   { 65.4375, 3.71875, 0 },
                                   { 65.976, 3.5160000000000005, 0 },
                                   { 66.5105, 3.3292499999999996, 0 },
                                   { 67.03199999999998, 3.1719999999999997, 0 },
                                   { 67.53150000000001, 3.0577499999999995, 0 },
                                   { 68.0, 3.0, 0 },
                                   { 68.445, 3.0010000000000003, 0 },
                                   { 68.88000000000001, 3.0480000000000005, 0 },
                                   { 69.305, 3.1319999999999997, 0 },
                                   { 69.72, 3.2439999999999998, 0 },
                                   { 70.125, 3.375, 0 },
                                   { 70.52, 3.516, 0 },
                                   { 70.905, 3.658, 0 },
                                   { 71.27999999999999, 3.792, 0 },
                                   { 71.645, 3.909, 0 },
                                   { 72.0, 4.0, 0 },
                                   { 72.33149999999999, 4.07925, 0 },
                                   { 72.632, 4.164, 0 },
                                   { 72.9105, 4.24975, 0 },
                                   { 73.17599999999999, 4.332, 0 },
                                   { 73.4375, 4.40625, 0 },
                                   { 73.704, 4.468, 0 },
                                   { 73.9845, 4.51275, 0 },
                                   { 74.28799999999998, 4.535999999999999, 0 },
                                   { 74.6235, 4.53325, 0 },
                                   { 75.0, 4.5, 0 },
                                   { 75.4235, 4.41975, 0 },
                                   { 75.888, 4.288, 0 },
                                   { 76.38449999999999, 4.11825, 0 },
                                   { 76.90400000000001, 3.9239999999999995, 0 },
                                   { 77.4375, 3.71875, 0 },
                                   { 77.976, 3.5160000000000005, 0 },
                                   { 78.51049999999998, 3.3292499999999996, 0 },
                                   { 79.03199999999998, 3.1719999999999997, 0 },
                                   { 79.53149999999998, 3.0577499999999995, 0 },
                                   { 80.0, 3.0, 0 },
                                   { 80.44500000000001, 3.0010000000000003, 0 },
                                   { 80.88000000000001, 3.0480000000000005, 0 },
                                   { 81.30499999999999, 3.1319999999999997, 0 },
                                   { 81.71999999999998, 3.2439999999999998, 0 },
                                   { 82.125, 3.375, 0 },
                                   { 82.52000000000001, 3.516, 0 },
                                   { 82.905, 3.658, 0 },
                                   { 83.27999999999999, 3.792, 0 },
                                   { 83.645, 3.909, 0 },
                                   { 84.0, 4.0, 0 },
                                   { 84.3315, 4.07925, 0 },
                                   { 84.632, 4.164, 0 },
                                   { 84.9105, 4.24975, 0 },
                                   { 85.176, 4.332, 0 },
                                   { 85.4375, 4.40625, 0 },
                                   { 85.70400000000001, 4.468, 0 },
                                   { 85.9845, 4.51275, 0 },
                                   { 86.28799999999998, 4.535999999999999, 0 },
                                   { 86.62349999999999, 4.53325, 0 },
                                   { 87.0, 4.5, 0 },
                                   { 87.42349999999999, 4.41975, 0 },
                                   { 87.888, 4.288, 0 },
                                   { 88.38449999999999, 4.11825, 0 },
                                   { 88.90399999999998, 3.9239999999999995, 0 },
                                   { 89.4375, 3.71875, 0 },
                                   { 89.976, 3.5160000000000005, 0 },
                                   { 90.5105, 3.3292499999999996, 0 },
                                   { 91.03199999999998, 3.1719999999999997, 0 },
                                   { 91.5315, 3.0577499999999995, 0 },
                                   { 92.0, 3.0, 0 },
                                   { 92.44500000000001, 3.0010000000000003, 0 },
                                   { 92.88, 3.0480000000000005, 0 },
                                   { 93.305, 3.1319999999999997, 0 },
                                   { 93.72000000000001, 3.2439999999999998, 0 },
                                   { 94.125, 3.375, 0 },
                                   { 94.52000000000001, 3.516, 0 },
                                   { 94.905, 3.658, 0 },
                                   { 95.27999999999999, 3.792, 0 },
                                   { 95.645, 3.909, 0 },
                                   { 96.0, 4.0, 0 },
                                   { 96.33149999999999, 4.07925, 0 },
                                   { 96.632, 4.164, 0 },
                                   { 96.9105, 4.24975, 0 },
                                   { 97.176, 4.332, 0 },
                                   { 97.4375, 4.40625, 0 },
                                   { 97.70400000000001, 4.468, 0 },
                                   { 97.9845, 4.51275, 0 },
                                   { 98.28799999999998, 4.535999999999999, 0 },
                                   { 98.62349999999999, 4.53325, 0 },
                                   { 99.0, 4.5, 0 },
                                   { 99.42349999999998, 4.41975, 0 },
                                   { 99.88799999999999, 4.288, 0 },
                                   { 100.38449999999999, 4.11825, 0 },
                                   { 100.904, 3.9239999999999995, 0 },
                                   { 101.4375, 3.71875, 0 },
                                   { 101.97600000000001, 3.5160000000000005, 0 },
                                   { 102.5105, 3.3292499999999996, 0 },
                                   { 103.03199999999998, 3.1719999999999997, 0 },
                                   { 103.5315, 3.0577499999999995, 0 },
                                   { 104.0, 3.0, 0 },
                                   { 104.445, 3.0010000000000003, 0 },
                                   { 104.88000000000001, 3.0480000000000005, 0 },
                                   { 105.305, 3.1319999999999997, 0 },
                                   { 105.72, 3.2439999999999998, 0 },
                                   { 106.125, 3.375, 0 },
                                   { 106.52, 3.516, 0 },
                                   { 106.90499999999999, 3.658, 0 },
                                   { 107.27999999999999, 3.792, 0 },
                                   { 107.645, 3.909, 0 },
                                   { 108.0, 4.0, 0 },
                                   { 108.33149999999998, 4.07925, 0 },
                                   { 108.632, 4.164, 0 },
                                   { 108.91049999999998, 4.24975, 0 },
                                   { 109.176, 4.332, 0 },
                                   { 109.4375, 4.40625, 0 },
                                   { 109.70400000000001, 4.468, 0 },
                                   { 109.9845, 4.51275, 0 },
                                   { 110.28799999999998, 4.535999999999999, 0 },
                                   { 110.6235, 4.53325, 0 },
                                   { 111.0, 4.5, 0 },
                                   { 111.42349999999999, 4.41975, 0 },
                                   { 111.88799999999999, 4.288, 0 },
                                   { 112.3845, 4.11825, 0 },
                                   { 112.904, 3.9239999999999995, 0 },
                                   { 113.4375, 3.71875, 0 },
                                   { 113.97600000000001, 3.5160000000000005, 0 },
                                   { 114.51050000000001, 3.3292499999999996, 0 },
                                   { 115.03199999999998, 3.1719999999999997, 0 },
                                   { 115.5315, 3.0577499999999995, 0 },
                                   { 116.0, 3.0, 0 },
                                   { 116.44499999999998, 3.0010000000000003, 0 },
                                   { 116.88, 3.0480000000000005, 0 },
                                   { 117.30499999999999, 3.1319999999999997, 0 },
                                   { 117.71999999999998, 3.2439999999999998, 0 },
                                   { 118.125, 3.375, 0 },
                                   { 118.52000000000001, 3.516, 0 },
                                   { 118.905, 3.658, 0 },
                                   { 119.27999999999999, 3.792, 0 },
                                   { 119.645, 3.909, 0 },
                                   { 120.0, 4.0, 0 },
                                   { 120.3315, 4.07925, 0 },
                                   { 120.63199999999999, 4.164, 0 },
                                   { 120.9105, 4.24975, 0 },
                                   { 121.17599999999999, 4.332, 0 },
                                   { 121.4375, 4.40625, 0 },
                                   { 121.70400000000002, 4.468, 0 },
                                   { 121.98449999999998, 4.51275, 0 },
                                   { 122.28799999999998, 4.535999999999999, 0 },
                                   { 122.62349999999999, 4.53325, 0 },
                                   { 123.0, 4.5, 0 },
                                   { 123.4235, 4.41975, 0 },
                                   { 123.88800000000002, 4.288, 0 },
                                   { 124.38450000000002, 4.11825, 0 },
                                   { 124.90399999999998, 3.9239999999999995, 0 },
                                   { 125.4375, 3.71875, 0 },
                                   { 125.97600000000001, 3.5160000000000005, 0 },
                                   { 126.51050000000001, 3.3292499999999996, 0 },
                                   { 127.03199999999998, 3.1719999999999997, 0 },
                                   { 127.5315, 3.0577499999999995, 0 },
                                   { 128.0, 3.0, 0 },
                                   { 128.44500000000002, 3.0010000000000003, 0 },
                                   { 128.88000000000002, 3.0480000000000005, 0 },
                                   { 129.305, 3.1319999999999997, 0 },
                                   { 129.72, 3.2439999999999998, 0 },
                                   { 130.125, 3.375, 0 },
                                   { 130.52, 3.516, 0 },
                                   { 130.90499999999997, 3.658, 0 },
                                   { 131.27999999999997, 3.792, 0 },
                                   { 131.645, 3.909, 0 },
                                   { 132.0, 4.0, 0 },
                                   { 132.3315, 4.07925, 0 },
                                   { 132.632, 4.164, 0 },
                                   { 132.91049999999998, 4.24975, 0 },
                                   { 133.17600000000002, 4.332, 0 },
                                   { 133.4375, 4.40625, 0 },
                                   { 133.70399999999998, 4.468, 0 },
                                   { 133.9845, 4.51275, 0 },
                                   { 134.28799999999998, 4.535999999999999, 0 },
                                   { 134.6235, 4.53325, 0 },
                                   { 135.0, 4.5, 0 },
                                   { 135.4235, 4.41975, 0 },
                                   { 135.888, 4.288, 0 },
                                   { 136.3845, 4.11825, 0 },
                                   { 136.90399999999997, 3.9239999999999995, 0 },
                                   { 137.4375, 3.71875, 0 },
                                   { 137.97600000000003, 3.5160000000000005, 0 },
                                   { 138.51049999999998, 3.3292499999999996, 0 },
                                   { 139.03199999999998, 3.1719999999999997, 0 },
                                   { 139.5315, 3.0577499999999995, 0 },
                                   { 140.0, 3.0, 0 },
                                   { 140.445, 3.0010000000000003, 0 },
                                   { 140.88, 3.0480000000000005, 0 },
                                   { 141.30499999999998, 3.1319999999999997, 0 },
                                   { 141.72, 3.2439999999999998, 0 },
                                   { 142.125, 3.375, 0 },
                                   { 142.51999999999998, 3.516, 0 },
                                   { 142.905, 3.658, 0 },
                                   { 143.27999999999997, 3.792, 0 },
                                   { 143.64499999999998, 3.909, 0 },
                                   { 144.0, 4.0, 0 },
                                   { 144.3315, 4.07925, 0 },
                                   { 144.632, 4.164, 0 },
                                   { 144.91049999999998, 4.24975, 0 },
                                   { 145.176, 4.332, 0 },
                                   { 145.4375, 4.40625, 0 },
                                   { 145.70400000000004, 4.468, 0 },
                                   { 145.9845, 4.51275, 0 },
                                   { 146.28799999999998, 4.535999999999999, 0 },
                                   { 146.6235, 4.53325, 0 },
                                   { 147.0, 4.5, 0 },
                                   { 147.4235, 4.41975, 0 },
                                   { 147.88799999999998, 4.288, 0 },
                                   { 148.3845, 4.11825, 0 },
                                   { 148.904, 3.9239999999999995, 0 },
                                   { 149.4375, 3.71875, 0 },
                                   { 149.976, 3.5160000000000005, 0 },
                                   { 150.51049999999998, 3.3292499999999996, 0 },
                                   { 151.03199999999998, 3.1719999999999997, 0 },
                                   { 151.5315, 3.0577499999999995, 0 },
                                   { 152.0, 3.0, 0 },
                                   { 152.44500000000002, 3.0010000000000003, 0 },
                                   { 152.88, 3.0480000000000005, 0 },
                                   { 153.305, 3.1319999999999997, 0 },
                                   { 153.71999999999997, 3.2439999999999998, 0 },
                                   { 154.125, 3.375, 0 },
                                   { 154.52, 3.516, 0 },
                                   { 154.905, 3.658, 0 },
                                   { 155.28, 3.792, 0 },
                                   { 155.64499999999998, 3.909, 0 },
                                   { 156.0, 4.0, 0 },
                                   { 156.33149999999998, 4.07925, 0 },
                                   { 156.63199999999998, 4.164, 0 },
                                   { 156.9105, 4.24975, 0 },
                                   { 157.176, 4.332, 0 },
                                   { 157.4375, 4.40625, 0 },
                                   { 157.704, 4.468, 0 },
                                   { 157.9845, 4.51275, 0 },
                                   { 158.28799999999995, 4.535999999999999, 0 },
                                   { 158.62349999999998, 4.53325, 0 },
                                   { 159.0, 4.5, 0 },
                                   { 159.4235, 4.41975, 0 },
                                   { 159.888, 4.288, 0 },
                                   { 160.3845, 4.11825, 0 },
                                   { 160.904, 3.9239999999999995, 0 },
                                   { 161.4375, 3.71875, 0 },
                                   { 161.976, 3.5160000000000005, 0 },
                                   { 162.51049999999998, 3.3292499999999996, 0 },
                                   { 163.03199999999998, 3.1719999999999997, 0 },
                                   { 163.53149999999997, 3.0577499999999995, 0 },
                                   { 164.0, 3.0, 0 },
                                   { 164.445, 3.0010000000000003, 0 },
                                   { 164.88000000000002, 3.0480000000000005, 0 },
                                   { 165.30499999999998, 3.1319999999999997, 0 },
                                   { 165.72, 3.2439999999999998, 0 },
                                   { 166.125, 3.375, 0 },
                                   { 166.52, 3.516, 0 },
                                   { 166.905, 3.658, 0 },
                                   { 167.28, 3.792, 0 },
                                   { 167.64499999999998, 3.909, 0 },
                                   { 168.0, 4.0, 0 },
                                   { 168.3315, 4.07925, 0 },
                                   { 168.632, 4.164, 0 },
                                   { 168.91049999999998, 4.24975, 0 },
                                   { 169.17600000000002, 4.332, 0 },
                                   { 169.4375, 4.40625, 0 },
                                   { 169.704, 4.468, 0 },
                                   { 169.9845, 4.51275, 0 },
                                   { 170.28799999999998, 4.535999999999999, 0 },
                                   { 170.62349999999998, 4.53325, 0 },
                                   { 171.0, 4.5, 0 },
                                   { 171.4235, 4.41975, 0 },
                                   { 171.888, 4.288, 0 },
                                   { 172.38450000000003, 4.11825, 0 },
                                   { 172.904, 3.9239999999999995, 0 },
                                   { 173.4375, 3.71875, 0 },
                                   { 173.97600000000003, 3.5160000000000005, 0 },
                                   { 174.5105, 3.3292499999999996, 0 },
                                   { 175.03199999999998, 3.1719999999999997, 0 },
                                   { 175.5315, 3.0577499999999995, 0 },
                                   { 176.0, 3.0, 0 },
                                   { 176.445, 3.0010000000000003, 0 },
                                   { 176.88000000000002, 3.0480000000000005, 0 },
                                   { 177.305, 3.1319999999999997, 0 },
                                   { 177.72, 3.2439999999999998, 0 },
                                   { 178.125, 3.375, 0 },
                                   { 178.52000000000004, 3.516, 0 },
                                   { 178.905, 3.658, 0 },
                                   { 179.28, 3.792, 0 },
                                   { 179.645, 3.909, 0 },
                                   { 180.0, 4.0, 0 },
                                   { 180.3315, 4.07925, 0 },
                                   { 180.63199999999998, 4.164, 0 },
                                   { 180.91049999999998, 4.24975, 0 },
                                   { 181.176, 4.332, 0 },
                                   { 181.4375, 4.40625, 0 },
                                   { 181.704, 4.468, 0 },
                                   { 181.9845, 4.51275, 0 },
                                   { 182.28799999999998, 4.535999999999999, 0 },
                                   { 182.62349999999998, 4.53325, 0 },
                                   { 183.0, 4.5, 0 },
                                   { 183.42349999999996, 4.41975, 0 },
                                   { 183.888, 4.288, 0 },
                                   { 184.3845, 4.11825, 0 },
                                   { 184.904, 3.9239999999999995, 0 },
                                   { 185.4375, 3.71875, 0 },
                                   { 185.976, 3.5160000000000005, 0 },
                                   { 186.5105, 3.3292499999999996, 0 },
                                   { 187.03199999999998, 3.1719999999999997, 0 },
                                   { 187.5315, 3.0577499999999995, 0 },
                                   { 188.0, 3.0, 0 },
                                   { 188.445, 3.0010000000000003, 0 },
                                   { 188.88000000000002, 3.0480000000000005, 0 },
                                   { 189.30499999999998, 3.1319999999999997, 0 },
                                   { 189.71999999999997, 3.2439999999999998, 0 },
                                   { 190.125, 3.375, 0 },
                                   { 190.52, 3.516, 0 },
                                   { 190.90499999999997, 3.658, 0 },
                                   { 191.28, 3.792, 0 },
                                   { 191.64499999999998, 3.909, 0 } });
        addProcessedPoint(inputs);
    }

    virtual ~DepthProfiler()
    {
    }

    void addRawPoint(Matrix<N, 3, T>& matrix)
    {
        // Apply filters and stuff.
        addProcessedPoint(matrix);
    }

    float calculateArea(const Matrix<4, 1, T>& params, T start, T end)
    {
        float y1 = ((1.0 / 4) * params.at(0, 0) * std::pow(start, 4)) +
                   ((1.0 / 3) * params.at(1, 0) * std::pow(start, 3)) +
                   ((1.0 / 2) * params.at(2, 0) * std::pow(start, 2)) + params.at(3, 0) * start;
        float y2 = ((1.0 / 4) * params.at(0, 0) * std::pow(end, 4)) + ((1.0 / 3) * params.at(1, 0) * std::pow(end, 3)) +
                   ((1.0 / 2) * params.at(2, 0) * std::pow(end, 2)) + params.at(3, 0) * end;
        return std::abs(y2 - y1);
    }

    void addProcessedPoint(Matrix<N, 3, T>& matrix)
    {
        try
        {
            BottomProfile<N, 3, T> bottom_profile;

            auto afgeleide                             = calculateAfgeleide(matrix);
            std::vector<std::size_t> peaks_and_valleys = findPeaksAndValleys(afgeleide, 0.001, 1);

            bottom_profile.raw_data_ = matrix;
            std::vector<std::pair<std::size_t, std::size_t>> waves = classifyWave(afgeleide, peaks_and_valleys);

            for (std::size_t i = 0; i < waves.size(); ++i)
            {
                Dune dune;
                dune.size_  = waves[i].second - waves[i].first;
                dune.start_ = waves[i].first;

                // TODO: change this magic number.
                if (dune.size_ > 60) //Our wave has more then 60 points
                {
                    continue;
                }
                if (dune.start_ + 60 > N) //Our wave doesn't fit in matrix, this is really bad coding.
                {
                    return;
                }
                Matrix<60, 2, float> single_dune_matrix(matrix, dune.size_, 0);

                // Translate x values so they start from 0. (This helps the Gausse-Newton algorithme find a result.)
                T start_x = single_dune_matrix.at(0, 0);
                for (std::size_t i = 0; i < dune.size_ + 1; ++i)
                {
                    single_dune_matrix.at(i, 0) -= start_x;
                }

                Matrix<4, 1, T> params({ 1, 1, 1, 1 });
                gaussNewton(single_dune_matrix, params, dune.size_);
                dune.signature_ = params;
                dune.area_ = calculateArea(params, single_dune_matrix.at(0, 0), single_dune_matrix.at(dune.size_, 0));
                bottom_profile.dunes_.push_back(dune);
                std::cout << dune.toString() << std::endl;
                std::cout << params << std::endl;
            }

            depth_data_.push_back(bottom_profile);
        }
        catch (std::exception& e)
        {
            std::cout << e.what() << std::endl;
        }
    }

    template <std::size_t H, std::size_t W>
    Matrix<H - 1, 2, T> calculateAfgeleide(Matrix<H, W, T>& matrix) const
    {
        Matrix<H - 1, 2, T> result;

        // TODO: Do we get the correct matrix values?
        for (std::size_t i = 0; i < H - 1; ++i)
        {
            result[i][0] = matrix[i][0];
            result[i][1] = (matrix[i + 1][1] - matrix[i][1]) / (matrix[i + 1][0] - matrix[i][0]);
        }
        return result;
    }

    template <std::size_t H, std::size_t W>
    std::vector<std::size_t> findPeaksAndValleys(const Matrix<H, W, T>& afgeleide,
                                                 float afweiking,
                                                 std::size_t minimal_x_diff = 0) const
    {
        std::vector<std::size_t> result;
        float last_found_x = 0;
        for (std::size_t i = 0; i < H - 1; ++i)
        {
            if (((afgeleide[i][1] < 0 && afgeleide[i + 1][1] > 0) ||
                 (afgeleide[i][1] > 0 && afgeleide[i + 1][1] < 0)) &&
                abs(afgeleide[i][0] - last_found_x) > minimal_x_diff)
            {
                last_found_x = afgeleide[i][0];
                result.push_back(i);
            }
        }
        std::cout << "Found: " << result.size() << " peaks or valleys" << std::endl;
        return result;
    }

    template <std::size_t H, std::size_t W>
    bool isPeak(const Matrix<H, W, T>& afgeleide, std::size_t index) const
    {
        assert(index + 2 < H);
        return afgeleide.at(index, 1) > afgeleide.at(index + 1, 1) &&
               afgeleide.at(index + 1, 1) > afgeleide.at(index + 2, 1);
    }

    template <std::size_t H, std::size_t W>
    std::vector<std::pair<std::size_t, std::size_t>>
    classifyWave(const Matrix<H, W, T>& afgeleide, const std::vector<std::size_t>& peaks_and_valleys) const
    {
        std::vector<std::pair<std::size_t, std::size_t>> result;
        for (std::size_t i = 0; i < peaks_and_valleys.size() - 3; ++i)
        {
            // Find a valley -> peak -> valley order.
            if (!isPeak(afgeleide, peaks_and_valleys[i]) && isPeak(afgeleide, peaks_and_valleys[i + 1]) &&
                !isPeak(afgeleide, peaks_and_valleys[i + 2]))
            {
                result.push_back(std::make_pair(peaks_and_valleys[i], peaks_and_valleys[i + 2]));
                std::cout << "Found a wave from:" << peaks_and_valleys[i] << " to: " << peaks_and_valleys[i + 2]
                          << std::endl;
            }
        }
        return result;
    }

    /**
     * Function that the GaussNewton tries to calculate the parameters for.
     */
    template <std::size_t H, std::size_t aH>
    T baseFunction(const Matrix<H, 1, T>& input, const Matrix<aH, 1, T>& params) const
    {
        T x = input.at(0, 0);

        return params.at(0, 0) * std::pow(x, 3) + params.at(1, 0) * std::pow(x, 2) + params.at(2, 0) * x +
               params.at(3, 0);
    }

    /**
     * Calculated derivative using: (y1 - y0)/(x1-x0).
     * But when doing so, it will change one parameter with a slight amount (DERIV_STEP).
     */
    template <std::size_t H, std::size_t aH>
    T calculateDerivative(const Matrix<H, 1, T>& input, const Matrix<aH, 1, T>& params, std::size_t param_number) const
    {
        // Make copy of the current parameters.
        Matrix<aH, 1, T> params1(params);
        Matrix<aH, 1, T> params2(params);

        // Use central difference  to get derivative.
        params1.at(param_number, 0) -= STEP_SIZE;
        params2.at(param_number, 0) += STEP_SIZE;

        T p1 = baseFunction(input, params1);
        T p2 = baseFunction(input, params2);

        return (p2 - p1) / (2 * STEP_SIZE);
    }

    /**
     * Solve the non-linear least square problem using the Gauss-Newton algorithme.
     * https://en.wikipedia.org/wiki/Gauss%E2%80%93Newton_algorithm
     */
    template <std::size_t H, std::size_t W, std::size_t aH>
    void gaussNewton(const Matrix<H, W, T>& inputs,
                     Matrix<aH, 1, T>& params,
                     std::size_t iterations = H,
                     const float precision  = 1e-8) const
    {
        assert(H >= W);

        Matrix<H, 1, T> residuals;  // Residual matrix
        Matrix<H, aH, T> jacobian;  // Jacobian matrix
        Matrix<1, 1, T> input;      // Single row input

        float last_deviation = 0;

        for (std::size_t i = 0; i < MAX_ITERATIONS; ++i)
        {
            float total_deviation = 0;

            for (std::size_t j = 0; j < iterations; ++j)
            {
                input.at(0, 0) = inputs.at(j, 0);

                // r_i(beta)= y_i - f(x_i, \beta).
                residuals.at(j, 0) = inputs.at(j, 1) - baseFunction(input, params);
                // Add the square difference of the last derived parameter and the wanted value to the total deviation.
                total_deviation += residuals.at(j, 0) * residuals.at(j, 0);

                for (std::size_t k = 0; k < aH; ++k)
                {
                    jacobian.at(j, k) = calculateDerivative(input, params, k);
                }
            }

            // Mean deviation over all the inputs.
            total_deviation /= H;

            // TODO: Maybe change this check to only check for the current deviation |total_deviation| < precision
            // If the deviation is since last iteration is smaller then precision, we have found the best optimal value.
            if (std::abs(total_deviation - last_deviation) < precision)
            {
                break;
            }

            // beta^(s+1) = beta^s - (Jf.T * Jf)^-1 * Jf.T * r(beta^s)
            auto jacobijnTranspose = jacobian.transpose();
            auto delta             = (jacobijnTranspose * jacobian).inverse() * jacobijnTranspose * residuals;
            last_deviation         = total_deviation;

            params += delta;

            if (std::isnan(total_deviation))
            {
                throw std::runtime_error("NaN is found");
            }
            if (i + 1 == MAX_ITERATIONS)
            {
                throw std::runtime_error("Took to many iterations");
            }

            std::cout << "Iteration: " << i << " " << total_deviation << std::endl;
        }
    }

  private:
    FileHandler file_instance_;
    std::vector<BottomProfile<N, 3, T>> depth_data_;
};

} /* namespace Controller */

#endif /* SRC_DEPTHPROFILER_HPP_ */
